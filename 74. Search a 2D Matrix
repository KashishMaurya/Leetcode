You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.





class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int i = 0, j = n - 1; // Start from top-right corner

        while (i < m && j >= 0) {
            if (matrix[i][j] > target) {
                j--; // Move left
            } else if (matrix[i][j] < target) {
                i++; // Move down
            } else {
                return true; // Found target
            }
        }
        return false;

        // //binary search
        // int m = matrix.length;
        // int n = matrix[0].length;

        // int start = 0;
        // int end = m * n - 1;

        // if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return false;

        // while (start <= end) {
        //     int mid = start + (end - start) / 2;

        //     int row = mid / n;
        //     int col = mid % n;

        //     if (matrix[row][col] > target) {
        //         end = mid - 1;
        //     } else if (matrix[row][col] < target) {
        //         start = mid + 1;
        //     } else {
        //         return true;
        //     }
        // }
        // return false;
    }
}
