class Solution {
    public int[] productExceptSelf(int[] nums) {

        //division based approach : O(N)
        //     public static int[] productExceptSelf(int arr[]) {
        //         int n = arr.length;
        //         int totalProduct = 1;
        //         int zeroCount = 0;

        //         // First pass: calculate total product and zero count
        //         for (int num : arr) {
        //             if (num == 0) {
        //                 zeroCount++;
        //             } else {
        //                 totalProduct *= num;
        //             }
        //         }

        //         int[] res = new int[n];

        //         for (int i = 0; i < n; i++) {
        //             if (zeroCount > 1) {
        //                 res[i] = 0;
        //             } else if (zeroCount == 1) {
        //                 res[i] = (arr[i] == 0) ? totalProduct : 0;
        //             } else {
        //                 res[i] = totalProduct / arr[i];
        //             }
        //         }

        //         return res;
        //     }
        



        //prefix suffix based approach
        int n = nums.length;
        int ans[] = new int[n];

        Arrays.fill(ans, 1);

        //prefix
        int curr = 1;
        for (int i = 0; i < n; i++) { //left to right calc
            ans[i] *= curr; //update answer
            curr *= nums[i]; //update curr value
        }

        //suffix
        curr = 1;
        for (int i = n - 1; i >= 0; i--) { //right to left
            ans[i] *= curr;
            curr *= nums[i];
        }

        return ans;





        //   int [] pre = new int[nums.length];

        // pre[0] = 1;

        // for(int i=1; i<nums.length; i++){
        //     pre[i] = pre[i-1]*nums[i-1];
        // }

        // int suffix =1;
        // for(int i=nums.length-1; i>=0; i--){
        //     pre[i] = pre[i]*suffix;
        //     suffix = suffix*nums[i];
        // }

        // return pre;






        // int zeros = 0, idx = -1, prod = 1;
        // int n = arr.length;

        // // Count zeros and track the index of the zero
        // for (int i = 0; i < n; i++) {
        //     if (arr[i] == 0) {
        //         zeros++;
        //         idx = i;
        //     } else {
        //         prod *= arr[i];
        //     }
        // }

        // int[] res = new int[n];
        // Arrays.fill(res, 0);

        // // If no zeros, calculate the product for all elements
        // if (zeros == 0) {
        //     for (int i = 0; i < n; i++) 
        //         res[i] = prod / arr[i];
        // }
        // // If one zero, set product only at the zero's index
        // else if (zeros == 1)
        //     res[idx] = prod;

        // return res;

    }
}
